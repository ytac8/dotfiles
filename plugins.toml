[[plugins]]
    repo = 'Shougo/dein.vim'

[[plugins]]
    repo = 'Shougo/vimproc.vim'
    build='make'

[[plugins]]
    repo = 'Shougo/deoplete.nvim'
    on_event = 'InsertCharPre'
    do = 'UpdateRemotePlugins'

    hook_add = '''
        let g:deoplete#enable_at_startup = 1
        let g:deoplete#file#enable_buffer_path = 1
        let g:deoplete#max_list = 50
        let g:deoplete#omni#input_patterns = {}
        let g:deoplete#omni#input_patterns.java='[^. *\t]\.\w*'
        let g:deoplete#omni#input_patterns.scala='[^. *\t]\.\w*'

        inoremap <silent><expr> <TAB>
              \ pumvisible() ? "\<C-n>" :
              \ <SID>check_back_space() ? "\<TAB>" :
              \ deoplete#manual_complete()
        function! s:check_back_space() abort "{{{
          let col = col('.') - 1
          return !col || getline('.')[col - 1]  =~ '\s'
        endfunction"}}}

        " <S-TAB>: completion back.
        inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

        " <BS>: close popup and delete backword char.
        inoremap <expr><BS> deoplete#smart_close_popup()."\<C-h>"

        " <CR>: close popup and save indent.
        inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
        function! s:my_cr_function() abort
          return deoplete#cancel_popup() . "\<CR>"
        endfunction

        let g:deoplete#enable_refresh_always = 0
        let g:deoplete#enable_camel_case = 1
        let g:deoplete#skip_chars = ['(', ')']
        '''
    on_i = 1

[[plugins]]
    repo = 'Shougo/neomru.vim'
[[plugins]]
    repo = 'Yggdroot/indentLine'

[[plugins]]
    repo = 'Shougo/denite.nvim'
    depends = ['neomru.vim']
    hook_add = '''
        nnoremap <silent> <space>dt :<C-u>Denite filetype<CR>
        nnoremap <silent> <space>df :<C-u>Denite file_rec<CR>
        nnoremap <silent> <space>dl :<C-u>Denite line<CR>
        nnoremap <silent> <space>dg :<C-u>Denite grep<CR>
        nnoremap <silent> <space>dw :<C-u>DeniteCursorWord grep<CR>
        nnoremap <silent> <space>dm :<C-u>Denite file_mru<CR>
        nnoremap <silent> <space>dy :<C-u>Denite neoyank<CR>
        nnoremap <silent> <space>dr :<C-u>Denite -resume<CR>
        nnoremap <silent> <space>d; :<C-u>Denite -resume -immediately -select=+1<CR>
        nnoremap <silent> <space>d- :<C-u>Denite -resume -immediately -select=-1<CR>
    '''

    hook_post_source = '''
        call denite#custom#var('file_rec', 'command',
        \ ['pt', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])
        call denite#custom#var('grep', 'command',
        \ ['pt', '--nogroup', '--nocolor', '--smart-case', '--hidden'])
        call denite#custom#var('grep', 'default_opts', [])
        call denite#custom#var('grep', 'recursive_opts', [])
    '''

[[plugins]]
    repo = 'Shougo/neoyank.vim'

[[plugins]]
    repo = 'Shougo/neopairs.vim'
    hook_add = '''
        let g:neopairs#enable = 1
    '''

[[plugins]]
    repo = 'osyo-manga/vim-over'

[[plugins]]
    repo = 'tpope/vim-commentary'

[[plugins]]
    repo = 'tpope/vim-rsi'

[[plugins]]
    repo = 'rhysd/clever-f.vim'

[[plugins]]
    repo = 'junegunn/fzf'

[[plugins]]
    repo = 'tpope/vim-surround'

[[plugins]]
    repo = 'cocopon/lightline-hybrid.vim'

[[plugins]]
    repo = 'itchyny/lightline.vim'
    hook_add = '''
        let g:lightline = {
            \ 'colorscheme': 'hybrid',
            \ 'mode_map': { 'c': 'NORMAL' },
            \ 'active': {
            \   'left': [ [ 'mode', 'paste' ], ['filename' ] ]
            \ },
            \ 'component_function': {
            \   'modified': 'LightLineModified',
            \   'readonly': 'LightLineReadonly',
            \   'filename': 'LightLineFilename',
            \   'fileformat': 'LightLineFileformat',
            \   'filetype': 'LightLineFiletype',
            \   'fileencoding': 'LightLineFileencoding',
            \   'mode': 'LightLineMode',
            \ },
            \ 'subseparator': { 'left': '|', 'right': '|' },
            \ 'tabline': {'left': [['tabs']], 'right': [['close']], 'colorscheme': 'hybrid'},
            \ 'component_expand': {'tabs': 'lightline#tabs'},
            \ 'component_type': {'tabs': 'tabsel'}
            \ }
        function! LightLineModified()
          return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
        endfunction

        function! LightLineReadonly()
          return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '⭤' : ''
        endfunction

        function! LightLineFilename()
          return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
                \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
                \  &ft == 'unite' ? unite#get_status_string() :
                \  &ft == 'vimshell' ? vimshell#get_status_string() :
                \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
                \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
        endfunction


        function! LightLineFileformat()
          return winwidth(0) > 70 ? &fileformat : ''
        endfunction

        function! LightLineFiletype()
          return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
        endfunction

        function! LightLineFileencoding()
          return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
        endfunction

        function! LightLineMode()
          return winwidth(0) > 60 ? lightline#mode() : ''
        endfunction
        let g:unite_force_overwrite_statusline = 0
        let g:vimfiler_force_overwrite_statusline = 0
        let g:vimshell_force_overwrite_statusline = 0
    '''

[[plugins]]
    repo = 'Shougo/neosnippet'
    depends = 'honza/vim-snippets'
    hook_add = '''
        imap <C-k> <Plug>(neosnippet_expand_or_jump)
        smap <C-k> <Plug>(neosnippet_expand_or_jump)
        xmap <C-k> <Plug>(neosnippet_expand_target)
        let g:neosnippet#enable_snipmate_compatibility = 1
        let g:neosnippet#enable_completed_snippet = 1
        let g:neosnippet#expand_word_boundary = 1
    '''

[[plugins]]
    repo = 'Shougo/neosnippet-snippets'


[[plugins]]
    repo = 'thinca/vim-quickrun'
    hook_add = '''
        nnoremap = <silent> <space>qr :<C-u>QuickRun<CR>
        nnoremap <expr><silent> <C-c> quickrun#is_running()
                    \? quickrun#sweep_sessions() : "\<C-c>"

        let g:quickrun_config = {
            \   "_" : {
            \       "runner" : "vimproc",
            \       "runner/vimproc/updatetime" : 60,
            \       "outputter/buffer/split" : ":botright",
            \       "outputter/buffer/close_on_empty" : 1
            \   },
            \}
    '''

[[plugins]]
    repo = 'nathanaelkane/vim-indent-guides'

[[plugins]]
    repo = 'cohama/lexima.vim'
    on_i = '''
        call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'latex'})
        call lexima#add_rule({'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': 'latex'})
        call lexima#add_rule({'char': '<BS>', 'at': '\$\%#\$', 'delete': 1, 'filetype': 'latex'})
    '''

[[plugins]]
    repo = 'lambdalisue/gina.vim'
    hook_add = '''
        nnoremap <silent> <space>gs :<C-u>Gina status<CR>
        nnoremap <silent> <space>gc :<C-u>Gina commit<CR>
        nnoremap <silent> <space>gp :<C-u>Gina push<CR>
    '''

[[plugins]]
    repo = 'airblade/vim-gitgutter'
    hook_add = '''
        let g:gitgutter_sign_added = '✚'
        let g:gitgutter_sign_modified = '➜'
        let g:gitgutter_sign_removed = '✘'
    '''

[[plugins]]
    repo = 'easymotion/vim-easymotion'
    hook_add = '''
        "easymotion settings
        " =======================================
        " boost your productivity with easymotion
        " =======================================
        " disable default mappings
        " if you are true vimmer, you should explicitly map keys by yourself.
        " do not rely on default bidings.
        let g:easymotion_do_mapping = 0
        let g:EasyMotion_smartcase = 1
        " or map prefix key at least(default: <leader><leader>)
        " map <leader> <plug>(easymotion-prefix)
        " =======================================
        " find motions
        " =======================================
        " jump to anywhere you want by just `4` or `3` key strokes without thinking!
        " `s{char}{char}{target}`
        nmap s <plug>(easymotion-s2)
        xmap s <plug>(easymotion-s2)
        omap z <plug>(easymotion-s2)
        " of course, you can map to any key you want such as `<space>`
        " map <space>(easymotion-s2)
        " " turn on case sensitive feature
        let g:easymotion_smartcase = 1
        " =======================================
        " line motions
        " =======================================
        " `jk` motions: extend line motions
        map <leader>j <plug>(easymotion-j)
        map <leader>k <plug>(easymotion-k)
        " keep cursor column with `jk` motions
        let g:easymotion_startofline = 0
        " =======================================
        " general configuration
        " =======================================
        let g:easymotion_keys = ';hklyuiopnm,qwertasdgzxcvbjf'
        " show target key with upper case to improve readability
        let g:easymotion_use_upper = 1
        " jump to first match with enter & space
        let g:easymotion_enter_jump_first = 1
        let g:easymotion_space_jump_first = 1
    '''

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
    repo = 'osyo-manga/vim-precious'
    depends = ['Shougo/context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
    repo = 'Shougo/context_filetype.vim'

[[plugins]]
    repo = 'mattn/emmet-vim'
    on_ft = ['html']

[[plugins]] # toml syntax
    repo = 'cespare/vim-toml'
    on_ft = 'toml'

[[plugins]]
    repo = 'tyru/open-browser.vim'

[[plugins]]
    repo = 'kannokanno/previm'
    hook_add = '''
        nnoremap <space>pv :PrevimOpen<CR>
    '''

[[plugins]]
    repo = 'tpope/vim-endwise'

#Ruby Settings
[[plugins]]
    repo = 'vim-ruby/vim-ruby'
    on_ft = ['ruby']

[[plugins]]
    repo = 'osyo-manga/vim-monster'
    on_ft = ['ruby']

[[plugins]]
    repo = 'tpope/vim-rails'
    on_ft = ['ruby']

# python settings

[[plugins]]
    repo = 'davidhalter/jedi-vim'
    on_ft = ['python', 'python3', 'djangohtml']
    hook_add = '''
        let g:jedi#popup_on_dot = 0
    '''

[[plugins]]
    repo = 'zchee/deoplete-jedi'
    on_ft = ['python', 'python3', 'djangohtml']

[[plugins]]
    repo = 'w0rp/ale'
    hook_add = '''
        let g:ale_lint_on_enter = 0
        let g:ale_lint_on_text_changed = 0
        let g:ale_sign_column_always = 1
        let g:ale_fix_on_save = 1
        let g:ale_completion_enabled = 1
        let g:ale_linter_aliases = {'vue': 'css'}
        let g:ale_python_flake8_options = '--max-line-length=120'
        let g:ale_python_autopep8_options = '--max-line-length=120'
        let g:ale_sign_error = "◉"
        let g:ale_sign_warning = "◉"
        let g:ale_linters = {
            \ 'javascript': ['eslint'],
            \ 'python': ['flake8', 'isort'],
            \ }
        let g:ale_fixers = {
              \ 'javascript': ['eslint'],
              \ 'python': ['autopep8', 'isort'],
              \ 'markdown': [
              \   {buffer, lines -> {'command': 'textlint -c ~/.config/textlintrc -o /dev/null --fix --no-color --quiet %t', 'read_temporary_file': 1}}
              \   ],
              \ }
    '''

[[plugins]]
    repo = 'tell-k/vim-autopep8'
    on_ft = ['python', 'python3']
    hook_add = '''
        function! Preserve(command)
            " Save the last search.
            let search = @/
            " Save the current cursor position.
            let cursor_position = getpos('.')
            " Save the current window position.
            normal! H
            let window_position = getpos('.')
            call setpos('.', cursor_position)
            " Execute the command.
            execute a:command
            " Restore the last search.
            let @/ = search
            " Restore the previous window position.
            call setpos('.', window_position)
            normal! zt
            " Restore the previous cursor position.
            call setpos('.', cursor_position)
        endfunction

        function! Autopep8()
            call Preserve(':silent %!autopep8 -')
        endfunction

        autocmd FileType python nnoremap <S-f> :call Autopep8()<CR>
    '''

# scala setting
[[plugins]]
    repo = 'derekwyatt/vim-scala'
    on_ft = ['scala']

[[plugins]]
    repo = 'ktvoelker/sbt-vim'

# go setting
[[plugins]]
    repo = 'fatih/vim-go'
    on_ft = ['go']
    hook_add = '''
        let g:go_version_warning = 0
        let g:go_highlight_functions = 1
        let g:go_highlight_methods = 1
        let g:go_highlight_structs = 1
    '''

[[plugins]]
    repo = 'zchee/deoplete-go'
    on_ft = ['go']



# javascript settings
[[plugins]]
    repo = 'pangloss/vim-javascript'
    on_ft = ['javascript', 'javascript.jsx', 'typescript']

[[plugins]]
    repo = 'othree/yajs.vim'
    on_ft = ['javascript','javascript.jsx', 'typescript']

[[plugins]]
    repo = 'othree/es.next.syntax.vim'
    on_ft = ['javascript','javascript.jsx', 'typescript']

[[plugin]]
    repo ='othree/javascript-libraries-syntax.vim'
    on_ft = ['javascript', 'javascript.jsx', 'typescript']
    hook_add = '''
        let g:used_javascript_libs = 'jquery,underscore,react,flux,jasmine,d3'
        let b:javascript_lib_use_jquery = 1
        let b:javascript_lib_use_underscore = 1
        let b:javascript_lib_use_react = 1
        let b:javascript_lib_use_flux = 1
        let b:javascript_lib_use_jasmine = 1
        let b:javascript_lib_use_d3 = 1
    '''

[[plugins]]
    repo = 'mhartington/nvim-typescript'
    on_ft = ['javascript', 'javascript.jsx', 'typescript', 'typescript.tsx']
    hook_add = '''
        let g:nvim_typesctipt#vue_support = 1 

    '''
[[plugins]]
    repo='maxmellon/vim-jsx-pretty'
    on_ft = ['javascript', 'javascript.jsx', 'typescript', 'typescript.tsx']
    hook_add = '''
        let g:vim_jsx_pretty_highlight_close_tag = 1
    '''

[[plugins]]
    repo = 'ternjs/tern_for_vim'
    on_ft = ['javascript', 'javascript.jsx', 'typescript', 'typescript.tsx']

[[plugins]]
    repo = 'posva/vim-vue'
    on_ft = ['javascript', 'javascript.jsx', 'typescript', 'javascript.vue']

# html
[[plugins]]
    repo = 'othree/html5.vim'
    on_ft = 'html'

# css
[[plugins]]
    repo = 'tpope/vim-haml'

[[plugins]]
    repo = 'cakebaker/scss-syntax.vim'

# toml
[[plugins]]
    repo = 'cespare/vim-toml'
    on_ft = 'toml'

# markdown
[[plugins]]
    repo = 'plasticboy/vim-markdown'
    on_ft = ['markdown', 'md']
