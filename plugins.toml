[[plugins]]
    repo = 'Shougo/dein.vim'

[[plugins]]
    repo = 'Shougo/deoplete.nvim'
    on_event = 'InsertCharPre'
    hook_add = '''
        let g:deoplete#enable_at_startup = 1
        let g:deoplete#file#enable_buffer_path = 1
        let g:deoplete#auto_complete_delay = 0
        let g:deoplete#max_list = 10
        inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
        inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>" 
    '''
    on_i = 1

[[plugins]]
    repo = 'Shougo/neomru.vim'

[[plugins]]
    repo = 'Shougo/unite.vim'
    hook_add = '''
        let g:unite_enable_start_insert=1
        nnoremap <silent> <space>ub :<C-u>Unite buffer<CR>
        nnoremap <silent> <space>uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
        nnoremap <silent> <space>uu :<C-u>Unite file_mru buffer<CR>
        nnoremap <silent> <space>ur :<C-u>Unite -buffer-name=register register<CR>
        " grep検索
        nnoremap <silent> <space>ug  :<C-u>Unite grep: -buffer-name=search-buffer<CR>
        " unite grepにhw(highway)を使う
        if executable('hw')
          let g:unite_source_grep_command = 'hw'
          let g:unite_source_grep_default_opts = '--no-group --no-color'
          let g:unite_source_grep_recursive_opt = ''
        endif
    '''

[[plugins]]
    repo = 'Shougo/neoyank.vim'
    hook_add = '''
        nnoremap <silent> <space>uy :<C-u>Unite history/yank<CR>
    '''
[[plugins]]
    repo = 'Shougo/neopairs.vim'
    hook_add = '''
        let g:neopairs#enable = 1
    '''

[[plugins]]
    repo = 'Shougo/vimshell'
    hook_add = '''
        nnoremap <silent> <space>vs :<C-u>VimShell<CR>
        nnoremap <silent> <space>vp :<C-u>VimShellPop<CR>
        autocmd FileType vimshell imap 
            \ <buffer><silent><expr><C-d>
            \ vimshell#get_cur_text()=='' ? "\<Esc>\<Plug>(vimshell_exit)" : "\<Del>"
    '''

[[plugins]]
    repo = 'kana/vim-smartinput'

[[plugins]]
    repo = 'kana/vim-operator-user'

[[plugins]]
    repo = 'kana/vim-textobj-user'

[[plugins]]
    repo = 'tpope/vim-commentary'

[[plugins]]
    repo = 'tpope/vim-rsi'

[[plugins]]
    repo = 'itchyny/lightline.vim'
    #lightline settings{{{
    hook_add = '''
        let g:lightline = {
            \ 'colorscheme': 'molokai',
            \ 'mode_map': { 'c': 'NORMAL' },
            \ 'active': {
            \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
            \ },
            \ 'component_function': {
            \   'modified': 'LightLineModified',
            \   'readonly': 'LightLineReadonly',
            \   'fugitive': 'LightLineFugitive',
            \   'filename': 'LightLineFilename',
            \   'fileformat': 'LightLineFileformat',
            \   'filetype': 'LightLineFiletype',
            \   'fileencoding': 'LightLineFileencoding',
            \   'mode': 'LightLineMode',
            \ },
            \ 'separator': { 'left': '⮀', 'right': '⮂' },
            \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
            \ }

        function! LightLineModified()
          return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
        endfunction
        
        function! LightLineReadonly()
          return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '⭤' : ''
        endfunction
        
        function! LightLineFilename()
          return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
                \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
                \  &ft == 'unite' ? unite#get_status_string() :
                \  &ft == 'vimshell' ? vimshell#get_status_string() :
                \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
                \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
        endfunction
        
        function! LightLineFugitive()
          if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
            let branch = fugitive#head()
            return branch !=# '' ? '⭠ '.branch : ''
          endif
          return ''
        endfunction
        
        function! LightLineFileformat()
          return winwidth(0) > 70 ? &fileformat : ''
        endfunction
        
        function! LightLineFiletype()
          return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
        endfunction
        
        function! LightLineFileencoding()
          return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
        endfunction
        
        function! LightLineMode()
          return winwidth(0) > 60 ? lightline#mode() : ''
        endfunction

        let g:unite_force_overwrite_statusline = 0
        let g:vimfiler_force_overwrite_statusline = 0
        let g:vimshell_force_overwrite_statusline = 0
    '''
#}}}

[[plugins]]
    repo = 'kchmck/vim-coffee-script'

[[plugins]]
    repo = 'leafgarland/typescript-vim'
[[plugins]]
    repo = 'Shougo/neosnippet'

[[plugins]]
    repo = 'Shougo/neosnippet-snippets'

[[plugins]]
    repo = 'othree/html5.vim'

[[plugins]]
    repo = 'rhysd/vim-operator-surround'

[[plugins]]
    repo = 'thinca/vim-quickrun'
    hook_add = '''
        nnoremap = <silent> <space>qr :<C-u>QuickRun<CR>
        nnoremap <expr><silent> <C-c> quickrun#is_running() 
                    \? quickrun#sweep_sessions() : "\<C-c>"

        let g:quickrun_config = {
            \   "_" : {
            \       "runner" : "vimproc",
            \       "runner/vimproc/updatetime" : 60,
            \       "outputter/buffer/split" : ":botright",
            \       "outputter/buffer/close_on_empty" : 1
            \   },
            \}
    '''

[[plugins]]
    repo = 'nathanaelkane/vim-indent-guides'

[[plugins]]
    repo = 'kevinw/pyflakes-vim'
    hook_add = '''
        let g:syntastic_mode_map = {
            \ 'mode': 'active',
            \ 'active_filetypes': ['php', 'coffeescript', 'sh', 'vim'],
            \ 'passive_filetypes': ['html', 'haskell', 'python']
        \}
    '''
[[plugins]]
    repo = 'cohama/lexima.vim'
    on_i = '''
        call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'latex'})
        call lexima#add_rule({'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': 'latex'})
        call lexima#add_rule({'char': '<BS>', 'at': '\$\%#\$', 'delete': 1, 'filetype': 'latex'})
    '''

[[plugins]]
    repo = 'tpope/vim-fugitive'
    hook_add = '''
        nnoremap <silent> <space>gs :<C-u>Gstatus<CR>
        nnoremap <silent> <space>gc :<C-u>Gcommit<CR>
        nnoremap <silent> <space>ga :<C-u>Gwrite<CR>
        nnoremap <silent> <space>gd :<C-u>Gdiff<CR>
        nnoremap <silent> <space>gb :<C-u>Gblame<CR>
    '''

[[plugins]]
    repo = 'airblade/vim-gitgutter'
    hook_add = '''
        let g:gitgutter_sign_added = '✚'
        let g:gitgutter_sign_modified = '➜'
        let g:gitgutter_sign_removed = '✘'
    '''
[[plugins]]
    repo = 'plasticboy/vim-markdown'

[[plugins]]
    repo = 'pangloss/vim-javascript'

[[plugins]]
    repo = 'scrooloose/syntastic'
    hook_add = '''
        let g:syntastic_enable_signs=1
        let g:syntastic_auto_loc_list=2
    '''

[[plugins]]
    repo = 'tpope/vim-haml'

[[plugins]]
    repo = 'cakebaker/scss-syntax.vim'

[[plugins]]
    repo = 'haya14busa/incsearch.vim'
    hook_add = '''
        map /  <Plug>(incsearch-forward)
        map ?  <Plug>(incsearch-backward)
        map g/ <Plug>(incsearch-stay)
    '''

[[plugins]]
    repo = 'easymotion/vim-easymotion'
    hook_add = '''
        "easymotion settings
        " =======================================
        " boost your productivity with easymotion
        " =======================================
        " disable default mappings
        " if you are true vimmer, you should explicitly map keys by yourself.
        " do not rely on default bidings.
        let g:easymotion_do_mapping = 0
        " or map prefix key at least(default: <leader><leader>)
        " map <leader> <plug>(easymotion-prefix)
        " =======================================
        " find motions
        " =======================================
        " jump to anywhere you want by just `4` or `3` key strokes without thinking!
        " `s{char}{char}{target}`
        nmap s <plug>(easymotion-s2)
        xmap s <plug>(easymotion-s2)
        omap z <plug>(easymotion-s2)
        " of course, you can map to any key you want such as `<space>`
        " map <space>(easymotion-s2)
        " " turn on case sensitive feature
        let g:easymotion_smartcase = 1
        " =======================================
        " line motions
        " =======================================
        " `jk` motions: extend line motions
        map <leader>j <plug>(easymotion-j)
        map <leader>k <plug>(easymotion-k)
        " keep cursor column with `jk` motions
        let g:easymotion_startofline = 0
        " =======================================
        " general configuration
        " =======================================
        let g:easymotion_keys = ';hklyuiopnm,qwertasdgzxcvbjf'
        " show target key with upper case to improve readability
        let g:easymotion_use_upper = 1
        " jump to first match with enter & space
        let g:easymotion_enter_jump_first = 1
        let g:easymotion_space_jump_first = 1
    '''

[[plugins]]
    repo = 'scrooloose/syntastic.git'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
    repo = 'osyo-manga/vim-precious'
    depends = ['Shougo/context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
    repo = 'Shougo/context_filetype.vim'

[[plugins]]
    repo = 'mattn/emmet-vim'
    on_ft = ['html']

[[plugins]] # toml syntax
    repo = 'cespare/vim-toml'
    on_ft = 'toml'

[[plugins]]
    repo = 'Shougo/vimfiler.vim'
    hook_add ='''
        nnoremap <space>vf :VimFiler<CR>
        let g:vimfiler_as_default_explorer = 1
        let g:vimfiler_edit_action = 'tabopen'
    '''

[[plugins]]
    repo = 'tyru/open-browser.vim'

[[plugins]]
    repo = 'kannokanno/previm'
    hook_add = '''
        nnoremap <space>pv :PrevimOpen<CR>
    '''

[[plugins]]
    repo = 'tpope/vim-endwise'

#Ruby Settings
[[plugins]]
    repo = 'vim-ruby/vim-ruby'
    on_ft = ['ruby']

[[plugins]]
    repo = 'osyo-manga/vim-monster'
    on_ft = ['ruby']

[[plugins]]
    repo = 'tpope/vim-rails'
    on_ft = ['ruby']

#python settings

[[plugins]]
    repo = 'zchee/deoplete-jedi'
    on_ft = ['python', 'python3', 'djangohtml']

[[plugins]]
    repo = 'andviro/flake8-vim'
    on_ft = ['python', 'python3', 'djangohtml']

[[plugins]]
    repo = 'hynek/vim-python-pep8-indent'
    on_ft = ['python', 'python3', 'djangohtml']

#NyaoVim Settings
[[plugins]]
    repo = 'rhysd/nyaovim-markdown-preview'

[[plugins]]
    repo = 'rhysd/nyaovim-mini-browser'

[[plugins]]
    repo = 'cespare/vim-toml'

